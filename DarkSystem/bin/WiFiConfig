#!/bin/sh
#//////////////////////////////////////////////////
#//DESLinux WiFi Configurator
#//	(C)2014-2025 Dark Embedded Systems.
#//	http://e.xprj.net/
#//////////////////////////////////////////////////
SELF=`readlink -f ${0}`
sRoot=${SELF%/*};

. ${sRoot}/ConfigManager.sh

Main(){
	local WIFI_CONF_DIR="${sRoot}/../conf/WiFi";
	local WIFI_TMP_DIR="/tmp/DWFConfig";
	local WIFI_CTRL_DIR="${WIFI_TMP_DIR}/ctrl";

	local DROOT="${DROOT:-/DRoot}";
	local ServerLoader="${ServerLoader:-${DROOT}/ServerLoader}";
	local NUL='/dev/null';
	local OFS="${IFS}";

	local MAC4;
	ConfigLoad "${sRoot}/../conf/System.conf"
	ConfigGet MAC4 System:BaseMAC 02:00:00:00

	[ "${WIFI_TMP_DIR}" = '' ] && return 1;

	rm -rf "${WIFI_TMP_DIR}"
	mkdir -p "${WIFI_TMP_DIR}"
	mkdir -p "${WIFI_CTRL_DIR}"

	local AP_MULTI_PROCESS=false;
	ConfigLoad "${WIFI_CONF_DIR}/WiFiConfig.conf"
	ConfigGet AP_MULTI_PROCESS Global:APMultiProcess false

	InitializeDev

	local EXECAP EXECSTA EXECMP NOSTART;
	local IFS=$' \n\r';
	for a in ${*}; do
		case ${a} in
			/Config:*)
				WIFI_CONF_DIR=${a#*:};
				echo "I: Using configuration folder \"${1}\""
				;;
			/MAC4:*)	MAC4=${a#*:};;
			/AP)		EXECAP=1;;
			/STA)		EXECSTA=1;;
			/MP)		EXECMP=1;;
			/Stop)		NOSTART=1;;
		esac
	done

	[ "${EXECAP}${EXECSTA}${EXECMP}" = '' ] && {
		EXECAP=1;
		EXECSTA=1;
		EXECMP=1;
	}

	[ "${EXECAP}" = '1' ] && ExecAP
	[ "${EXECMP}" = '1' ] && ExecMP
	[ "${EXECAP}${EXECSTA}" = '11' ] && sleep 3
	[ "${EXECSTA}" = '1' ] && ExecSta

}

InitializeDevExec(){ # phy, mode, dev, type
	local P="${1}";
	local M="${2}";
	local D="${3}";
	local T="${4}";
	local IFS=' ';

	ip link set down dev ${D}
	iw dev ${D} del

	MAC="${MAC4:-02:00:00:00}:${M}";
	echo "I:   ${D}	-> ${MAC}"
	iw phy ${PHY} interface add ${D} type ${T}
	ip link set dev ${D} address "${MAC}"
}

InitializeDev(){
	local PHY PHYn PHYnH AP STA;

	echo "I: Initializing device..."

	local MAC;
	local IFS=$'\n\r';

	${ServerLoader} stop "AP" >${NUL} 2>&1

	for d in `iw phy`; do
		IFS=$' \t';
		set -- ${d}
		[ "${1}" = 'Wiphy' ] && {
			PHY=${2};
			PHYn=${PHY##*[A-z]};
			PHYnH=${PHYn};
			PHYnH=`${sRoot}/dec2hex ${PHYnH}`

			echo "I:  ${PHY} ..."

			${ServerLoader} stop "AP_${PHYn}" >${NUL} 2>&1
			${ServerLoader} stop "STA_${PHYn}" >${NUL} 2>&1

			InitializeDevExec "${PHY}" "A${PHYn}:00" "w${PHYn}_AP"   "__ap"
			InitializeDevExec "${PHY}" "C${PHYn}:00" "w${PHYn}_Sta"  "managed"
			InitializeDevExec "${PHY}" "C${PHYn}:40" "w${PHYn}_4Adr" "managed 4addr on"
			InitializeDevExec "${PHY}" "D${PHYn}:00" "w${PHYn}_MP"   "mp"
		}
	done
}

##########

error(){
	echo "${*}" 1>&2;
}

GetIPAddr(){ # if
	local IFS=$' \t';
	for a in `ifconfig ${1}`; do
		[ "${a:0:5}" = 'addr:' ] && echo "${a:5}" && return
	done;
}

LeaveBridge(){ # if
	local DEV=${1}
	local IFS=$'\n\r';
	for a in `brctl show`; do
		IFS=$' \t';
		set -- ${a}
		[ ! "${2}" = '' ] && brctl delif ${1} ${DEV} 2>${NUL}

	done
}

##########

SetHWM(){
	[ "${HWM}" = "${1}" ] && {
		return 0;
	}

	[ "${HWM}" = '' ] && {
		HWM="${1}"
		return 0;
	}

	error "E: Invalid or unsupported type combination: ${HWM} and ${2:-${1}}.";
	return 1;
}

GeneralzieType(){
	local GRP=${1};
	local MODEx=${2};
	local V MODE FREQ ALLOW_B HWM HWM_n A G N AC AY AX ;

	# Guess HWM if frequency is ambiguous (n, ax, be specfied)
	ConfigGet V ${NS}::Global:Channel 0
	V=$((V-20));
	[ "${V:0:1}" = '-' ] && { HWM_n=g; } || { HWM_n=a; }

# Read
	local IFS=$' \t/';
	for t in ${MODEx}; do
		case "${t}" in
			'a') SetHWM a ${t} || return ${?}; A=1;;
			'b') SetHWM g ${t} || return ${?}; ALLOW_B=1;;
			'g') SetHWM g ${t} || return ${?}; G=1;;
			'n') SetHWM ${HWM_n} ${t} || return ${?}; N=1;;
			'ac') SetHWM a ${t} || return ${?}; AC=1;;
			'ad') SetHWM ad ${t} || return ${?};;
			'ay') SetHWM ad ${t} || return ${?}; AY=1;;
			'ax') SetHWM ${HWM_n} ${t} || return ${?}; AX=1;;
			'be') SetHWM ${HWM_n} ${t} || return ${?}; BE=1;;
		esac
	done

# Promote
	case "${HWM}" in
		'g' )
			[ "${ALLOW_B}:${G}:${N}" = '::1' ] && N=2;
			[ "${ALLOW_B}:${G}:${N}:${AX}" = ':::1' ] && AX=2;
			[ "${ALLOW_B}:${G}:${N}:${AX}:${BE}" = '::::1' ] && BE=2;
		;;
		'a' )
			[ "${A}:${N}" = ':1' ] && N=2;
			[ "${A}:${N}:${AC}" = '::1' ] && AC=2;
			[ "${A}:${N}:${AC}:${AX}" = ':::1' ] && AX=2;
			[ "${A}:${N}:${AC}:${AX}${BE}" = ':::1' ] && BE=2;
		;;
	esac

# Write
	echo "hw_mode=${HWM}"

# Type
	[ ! "${N}" = '' ] && {
		echo "ieee80211n=1"
		echo "wmm_enabled=1"

		local HTCAP;

		ConfigGet V ${NS}::Global:HTMode HT20
		case ${V} in
			HT20)		.;;
			HT40|HT40+)	HTCAP="${HTCAP} [HT40+]";;
			HT40-)		HTCAP="${HTCAP} [HT40-]";;
			*)	error "W: Unsupported HTMode \"${V}\" specified.";;
		esac

		ConfigGet V ${NS}::Global:GuardInterval long
		case ${V} in
			long)		.;;
			short)		HTCAP="${HTCAP} [SHORT-GI-40] [SHORT-GI-20]";;
			short20)	HTCAP="${HTCAP} [SHORT-GI-20]";;
			short40)	HTCAP="${HTCAP} [SHORT-GI-40]";;
			*)		error "W: Unsupported GuardInterval \"${V}\" specified.";;
		esac

		echo "ht_capab=${HTCAP}"
	}

	[ ! "${AC}" = '' ] && { # NOT SUPPORTED YET
		echo "ieee80211ac=1"

		ConfigGet V ${NS}::Global:HTMode HT20
		case ${V} in
			HT20|HT40|HT40+|HT40-)	echo "vht_oper_chwidth=0";;
			HT80|HT80+)		echo "vht_oper_chwidth=1";;
			HT80-)			echo "vht_oper_chwidth=1";;
			HT160|HT160+)		echo "vht_oper_chwidth=2";;
			HT160-)			echo "vht_oper_chwidth=2";;
			HT80+80|HT80+80+)	echo "vht_oper_chwidth=3";;
			HT80+80-)		echo "vht_oper_chwidth=3";;
			*)	error "W: Unsupported HTMode \"${V}\" specified.";;
		esac

		local VHTCAP="[VHT160] [VHT160-80PLUS80] [SU-BEAMFORMER] [SU-BEAMFORMEE] [MU-BEAMFORMER]";
		ConfigGet V ${NS}::Global:GuardInterval long
		case ${V} in
			long)	.;;
			short)	VHTCAP="${VHTCAP} [SHORT-GI-160] [SHORT-GI-80]";;
			*)	error "W: Unsupported GuardInterval \"${V}\" specified.";;
		esac

		echo "ht_capab=${VHTCAP}"
	}

	[ ! "${AX}" = '' ] && {
		echo "ieee80211ax=1"
		echo "he_su_beamformer=1"
		echo "he_su_beamformee=1"
		echo "he_mu_beamformer=1"
	}

	[ ! "${BE}" = '' ] && {
		echo "ieee80211be=1"
	}

# Enforce
	[ "${ALLOW_B}" = '1' ] && {
		echo "supported_rates=10 20 55 110 60 90 120 180 240 360 480 540"
		echo "basic_rates=10 20 55 110"
	} || {
		echo "supported_rates=10 20 55 110 60 90 120 180 240 360 480 540"
		echo "basic_rates=60 120 240"
	}
	[ "${N}" = '2' ] && echo "require_ht=1"
	[ "${AC}" = '2' ] && echo "require_vht=1"
	[ "${AX}" = '2' ] && echo "require_he=1"
	[ "${BE}" = '2' ] && echo "require_eht=1"

	return 0;
}


WConfigAPGlobal(){
	local NS=${1};
	local GRP=${NS}::Global;

# Device path
	ConfigGet V ${GRP}:Device -

# Initialize configuration file
	echo "# Global"
	echo "interface=w${V}_AP"
	echo "driver=nl80211"

	echo "logger_stdout=-1"
	echo "logger_stdout_level=2"

# Global settings
	ConfigGet V ${GRP}:Channel 0
	echo "channel=${V}"

	ConfigGet V ${GRP}:Beacon 100
	echo "beacon_int=${V}"

	ConfigGet V ${GRP}:DTIM 2
	echo "dtim_period=${V}"

	ConfigGet V ${GRP}:RTSThreshold 0
	[ ! "${V}" = '0' ] && echo "rts_threshold=${V}"

	ConfigGet V ${GRP}:FragmentThreshold 0
	[ ! "${V}" = '0' ] && echo "fragm_threshold=${V}"

	ConfigGet V ${GRP}:Preamble short
	case ${V} in
		short)	echo "preamble=1";;
		long)	echo "preamble=0";;
		*)	echo "preamble=0"; error "W: Unsupported preamble type \"${V}\" specified.";;
	esac

	ConfigGet V ${GRP}:Region 00
	echo "country_code=${V}"

	ConfigGet V ${GRP}:IEEE80211d false
	[ "${V}" = 'true' ] && echo "ieee80211d=1"

	ConfigGet V ${GRP}:IEEE80211h false
	[ "${V}" = 'true' ] && echo "ieee80211h=1"

# Sta Management
	ConfigGet V ${GRP}:DisconnectInactive 300
	echo "ap_max_inactivity=${V}"

	ConfigGet V ${GRP}:AllowInactive false
	case ${V} in
		true)		echo "skip_inactivity_poll=1";;
		false|*)	echo "skip_inactivity_poll=0";;
	esac

	ConfigGet V ${GRP}:DisconnectLowACK true
	case ${V} in
		true)		echo "disassoc_low_ack=1";;
		false|*)	echo "disassoc_low_ack=0";;
	esac

	ConfigGet V ${GRP}:APTableMax 255
	echo "ap_table_max_size=${V}"

	ConfigGet V ${GRP}:APTableExpire 60
	echo "ap_table_expiration_time=${V}"

	ConfigGet V ${GRP}:TrackStaMax 100
	echo "track_sta_max_num=${V}"

	ConfigGet V ${GRP}:TrackStaExpire 180
	echo "track_sta_max_age=${V}"

# Extra features
	echo "noscan=1"

	echo "vendor_elements=dd045F000012"
	echo "assocresp_elements=dd045F000012"

# Not supported: ProtectBG / ProtectN
	echo
}

DivideRadiusServer(){
	local IFS=':'
	set -- ${1}
	echo "auth_server_addr=${1:-127.0.0.1}"
	echo "auth_server_port=${2:-1812}"
	return 0;
}

WConfigAP_ESSID_WPA(){
# WPAn: Key Management
	local GRP=${1};
	local WPAn=${2};
	local AKEYM=${3};
	case ${AKEYM} in
		PSK)
			ConfigGet V ${GRP}:Key
			[ "${SAE}" = '1' ] && {
				WPAKM="${WPAKM} SAE";
				echo "sae_password=${V}"
			}
			WPAKM="${WPAKM} WPA-PSK";
			echo "wpa=${WPAn};"
			echo "wpa_passphrase=${V}"
			;;
		EAP)
			echo "wpa=${WPAn}"

			[ "${SAE}" = '1' ] && WPAKM="${WPAKM} WPA-EAP-SUITE-B-192";
			WPAKM="${WPAKM} WPA-EAP";

			echo "ieee8021x=1"
			ConfigGet V ${GRP}:RadiusServer 127.0.0.1:1812
			DivideRadiusServer "${V}"

			ConfigGet V ${GRP}:Key -
			echo "auth_server_shared_secret=${V}"
			;;
		*)
			error "E: Unsupported WPA key management \"${AKEYM}\" specified.";
			;;
	esac
	echo "wpa_key_mgmt=${WPAKM}"

# WPAn: Encryption type
	local ENC;
	ConfigGet V ${GRP}:Encrypt
	local IFS=$'/ \t';
	for e in ${V}; do
		ENC="${ENC} ${e}"
	done
	echo "wpa_pairwise=${ENC}"

# WPAn: Rekey
	ConfigGet V ${GRP}:RekeyGTK 1800
	[ ! "$((V+0))" = '0' ] && echo "wpa_group_rekey=$((V+0))"

	ConfigGet V ${GRP}:StrictGTK 0
	[ ! "$((V+0))" = '0' ] && echo "wpa_strict_rekey=1"

	ConfigGet V ${GRP}:RekeyGMK 1800
	[ ! "$((V+0))" = '0' ] && echo "wpa_gmk_rekey=$((V+0))"

	ConfigGet V ${GRP}:RekeyPTK 0
	[ ! "$((V+0))" = '0' ] && echo "wpa_ptk_rekey=$((V+0))"

}

WConfigAP_ESSID(){
	local GRP=${1};
	echo "# Section: ${GRP}"

	[ ! "${BSSCount}" = '0' ] && {
		ConfigGet V ${NS}::Global:Device 0
		echo "bss=w${V}_AP${BSSCount}"
	}
	BSSCount=$((BSSCount+1));

	ConfigGet V ${GRP}:ESSID -
	[ "${V}" = '-' ] && continue

# BSSID
	local BSSCountH=${BSSCount};
	BSSCountH=`${sRoot}/dec2hex ${BSSCountH}`;
	echo "bssid=${MAC5}:${BSSCountH}"

# ESSID
	echo "ssid2=\"${V}\""
	echo "utf8_ssid=1"

# Bridge
	ConfigGet V ${GRP}:Bridge -
	[ ! "${V}" = '-' ] && echo "bridge=${V}"


# Authentication
	echo "auth_algs=1"
	ConfigGet V ${GRP}:Auth none
	local IFS='-';
	set -- ${V}
	local ATYPE=${1:-none};
	local AKEYM=${2:-EAP};
	local WPAn WPAf1 WPAf2 SAE WPAKM;
	IFS=$'/';
	for t in ${ATYPE}; do
		case ${t} in
			WPA)	WPAf1=1;;
			WPA2)	WPAf2=2;;
			WPA3)	WPAf2=2; SAE=1;;
			OWE|eopen)	WPAKM="${WPAKM} OWE ";;
			none|open|Open)	;;
			*)	WPAf2=2; error "E: Unsupported authentication type \"${ATYPE}\" specified.";;
		esac
	done

# Authentication: WPAn
	WPAn=$((WPAf1+WPAf2));
	[ ! "${WPAn}" = '0' ] && {
		WConfigAP_ESSID_WPA ${GRP} ${WPAn} ${AKEYM}
	}

# WDS / 4addr
	ConfigGet V ${GRP}:WDS true
	case "${V}" in
		false ) ;;
		true | * )
			echo "wds_sta=1"
		;;
	esac

# Multi band support
	ConfigGet V ${GRP}:IgnoreProbeIf -
	[ ! "${V}" = '-' ] && {
		[ "${V}" = "$((V))" ] && {
			echo "no_probe_resp_if_seen_on=w${V}_AP"
		} || {
			echo "no_probe_resp_if_seen_on=${V}"
		}
	}

	ConfigGet V ${GRP}:NoAuthIf -
	[ ! "${V}" = '-' ] && {
		[ "${V}" = "$((V))" ] && {
			echo "no_auth_if_seen_on=w${V}_AP"
		} || {
			echo "no_auth_if_seen_on=${V}"
		}
	}

# Extra features
	ConfigGet V ${GRP}:Isolate false
	[ "${V}" = 'true' ] && echo "ap_isolate=1"

	ConfigGet V ${GRP}:Hide false
	case ${V} in
		true|0x00|zero|null)		echo "ignore_broadcast_ssid=1";;
		space|0x20|compatible)		echo "ignore_broadcast_ssid=2";;
	esac

	echo "ctrl_interface=${WIFI_CTRL_DIR}"

	echo
}

WConfigAP(){
	local NS=${1};
	local APn=${2};
	APn=`${sRoot}/dec2hex ${APn}`;
	local MAC5="${MAC4}:A${APn:1:1}";

	local CFG=${WIFI_TMP_DIR}/${NS}.conf;
# Global settings
	echo > ${CFG}
	WConfigAPGlobal ${NS} >> ${CFG}

# Type combination
	ConfigGet V ${NS}::Global:Mode -
	GeneralzieType ${NS} "${V}" >> ${CFG}
	[ "${?}" = '1' ] && return 1;

# per ESSID settings
	local BSSCount=0;

	# Main AP
	WConfigAP_ESSID ${NS}::AP >> ${CFG}

	# Sub APs
	for a in `ConfigSearchGroup ${NS}::AP`; do
		[ ! "${a}" = 'AP' ] && WConfigAP_ESSID ${NS}::${a} >> ${CFG}
	done

	case "${AP_MULTI_PROCESS}" in
		true )
			local DEV;
			ConfigGet DEV ${NS}::Global:Device -
			${ServerLoader} stop "AP_${DEV}" >${NUL} 2>&1

			[ ! "${NOSTART}" = '1' ] && ${ServerLoader} start "AP_${DEV}" /usr/sbin hostapd ${CFG}

		;;
		false | * ) ;;
	esac

	return 0;
}

##########

WConfigStaESSID(){
	local V;
	local GRP=${1};
	echo "# Section: ${GRP}"

	echo 'network={'
	echo '	scan_ssid=1'

	ConfigGet V ${GRP}:ESSID -
	echo "	ssid=\"${V}\""

	ConfigGet V ${GRP}:Auth none
	case "${V}" in
			WPA*-PSK)
				echo "	key_mgmt=WPA-PSK"
				ConfigGet V ${GRP}:Key -
				echo "	psk=\"${V}\""
			;;
			WPA*-PEAP | WPA*-EAP | WPA | WPA? )
				echo "	key_mgmt=WPA-EAP"
				echo "	eap=PEAP"

				ConfigGet V ${GRP}:ID -
				echo "	identity=\"${V}\""

				ConfigGet V ${GRP}:Key -
				echo "	password=\"${V}\""
			;;
			none|open|Open)	echo "	key_mgmt=NONE";;
			*)	error "E: Unsupported authentication type \"${V}\" specified.";;
	esac

	echo '}'
}

WConfigSta(){
	local NS=${1};
	local STAn=${2};
	local CFG=${WIFI_TMP_DIR}/${NS}.conf;

# Global settings
	local DEV;
	ConfigGet DEV ${NS}::Global:Device 0

	echo > ${CFG}

# WDS / 4addr
	ConfigGet V ${NS}::Global:WDS false
	local WDS='Sta';
	case "${V}" in
		true )
			WDS='4Adr';

			ConfigGet V ${NS}::Global:Bridge -
			[ ! "${V}" = '-' ] && brctl addif "${V}" "w${DEV}_${WDS}"
		;;
		false | * ) ;;
	esac


# per ESSID settings
	local BSSCount=0;

	# Main AP
	WConfigStaESSID ${NS}::AP >> ${CFG}

	# Sub APs
	for a in `ConfigSearchGroup ${NS}::AP`; do
		[ ! "${a}" = 'AP' ] && WConfigStaESSID ${NS}::${a} >> ${CFG}
	done

	${ServerLoader} stop "STA_${DEV}" >${NUL} 2>&1

	local CTRL='';
	[ -e "${WIFI_CTRL_DIR}/w${DEV}_AP" ] && CTRL="-H${WIFI_CTRL_DIR}/w${DEV}_AP";

	[ "${NOSTART}" = '1' ] && return 0;

	${ServerLoader} start "STA_${DEV}" /usr/sbin wpa_supplicant -Dnl80211 -iw${DEV}_${WDS} -c"${CFG}" ${CTRL}
	${ServerLoader} restart "DHCPC-w${DEV}_Sta" >${NUL} 2>&1
	${ServerLoader} restart "DHCPC-w${DEV}_4Adr" >${NUL} 2>&1

	return 0;
EOF

}

WConfigMP(){
	local NS=${1};
	local MPn=${2};
	local CFG=${WIFI_TMP_DIR}/${NS}.conf;

	ConfigGet V ${NS}::Global:Channel 0

	local FREQ=0;
	case ${V} in
		1	) FREQ=2412;;
		2	) FREQ=2417;;
		3	) FREQ=2422;;
		4	) FREQ=2427;;
		5	) FREQ=2432;;
		6	) FREQ=2437;;
		7	) FREQ=2442;;
		8	) FREQ=2447;;
		9	) FREQ=2452;;
		10	) FREQ=2457;;
		11	) FREQ=2462;;
		12	) FREQ=2467;;
		13	) FREQ=2472;;
		14	) FREQ=2484;;
		36	) FREQ=5180;;
		40	) FREQ=5200;;
		44	) FREQ=5220;;
		48	) FREQ=5240;;
		52	) FREQ=5260;;
		56	) FREQ=5280;;
		60	) FREQ=5300;;
		64	) FREQ=5320;;
		100	) FREQ=5500;;
		104	) FREQ=5520;;
		108	) FREQ=5540;;
		112	) FREQ=5560;;
		116	) FREQ=5580;;
		120	) FREQ=5600;;
		124	) FREQ=5620;;
		128	) FREQ=5640;;
		132	) FREQ=5660;;
		136	) FREQ=5680;;
		140	) FREQ=5700;;
		149	) FREQ=5745;;
		153	) FREQ=5765;;
		157	) FREQ=5785;;
		161	) FREQ=5805;;
		165	) FREQ=5825;;
	esac

	local DEV;
	ConfigGet DEV ${NS}::Global:Device 0

	local HTMODE;
	ConfigGet HTMODE ${NS}::Global:HTMode HT20

	local BEACON;
	ConfigGet BEACON ${GRP}:Beacon 100

	for a in `ConfigSearchGroup ${NS}::MP`; do
		ip link set up dev w${DEV}_MP
		ConfigGet V ${NS}::${a}:Bridge -
		[ ! "${V}" = '-' ] && brctl addif "${V}" "w${DEV}_MP"

		ConfigGet V ${NS}::${a}:MeshID Undefined
		iw dev w${DEV}_MP mesh join ${V} freq ${FREQ} ${HTMODE} beacon-interval ${BEACON}
	done

}

##########

ExecAP(){
	ls ${WIFI_CONF_DIR}/AP*.conf >${NUL} 2>&1 || return 1;

	local T APn;
	for f in `ls ${WIFI_CONF_DIR}/AP*.conf`; do
		T=${f##*/};
		T=${T//\.*};

		ConfigLoad "${f}" ${T}
		[ "${?}" = '0' ] && {
			WConfigAP ${T} $((APn))
		}
		APn=$((APn+1));
	done

	${ServerLoader} stop "AP" >${NUL} 2>&1

	[ "${NOSTART}" = '1' ] && return 0;
	case "${AP_MULTI_PROCESS}" in
		true ) ;;
		false | * )
			${ServerLoader} start "AP" /usr/sbin hostapd ${WIFI_TMP_DIR}/AP*.conf
		;;
	esac

	return 0;
}

ExecSta(){
	ls ${WIFI_CONF_DIR}/Sta*.conf >${NUL} 2>&1 || return 1;

	local T STAn;
	for f in `ls ${WIFI_CONF_DIR}/Sta*.conf`; do
		T=${f##*/};
		T=${T//\.*};

		ConfigLoad "${f}" ${T}
		[ "${?}" = '0' ] && {
			WConfigSta ${T} $((STAn))
		}
		STAn=$((STAn+1));
	done
	return 0;
}

ExecMP(){
	ls ${WIFI_CONF_DIR}/MP*.conf >${NUL} 2>&1 || return 1;

	local T MPn;
	for f in `ls ${WIFI_CONF_DIR}/MP*.conf`; do
		T=${f##*/};
		T=${T//\.*};

		ConfigLoad "${f}" ${T}
		[ "${?}" = '0' ] && {
			WConfigMP ${T} $((MPn))
		}
		MPn=$((MPn+1));
	done
}

Main "${@}"
